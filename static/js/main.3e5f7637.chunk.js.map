{"version":3,"sources":["RecordPage.js","App.js","reportWebVitals.js","index.js"],"names":["RecordPage","useState","state","setState","useEffect","a","navigator","mediaDevices","getUserMedia","video","audio","stream","recorder","RecordRTCPromisesHandler","type","recorderType","RecordRTC","StereoAudioRecorder","startRecording","sleep","m","Promise","r","setTimeout","stopRecording","getBlob","blob","URL","createObjectURL","getDataURL","data","JSON","stringify","controls","preload","src","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PA2CeA,EAxCI,WACjB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OArBAC,qBAAU,WACR,sBAAC,oCAAAC,EAAA,sEACoBC,UAAUC,aAAaC,aAAa,CACrDC,OAAO,EACPC,OAAO,IAHV,cACKC,EADL,QAKKC,EAAW,IAAIC,2BAAyBF,EAAQ,CAClDG,KAAM,QACNC,aAAcC,IAAUC,uBAEjBC,iBACHC,EAAQ,SAACC,GAAD,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAOC,WAAWD,EAAGF,OAVvD,SAWOD,EAAM,KAXb,wBAYOP,EAASY,gBAZhB,yBAakBZ,EAASa,UAb3B,eAaKC,EAbL,OAcCC,IAAIC,gBAAgBF,GAdrB,UAekBd,EAASiB,aAf3B,QAeKC,EAfL,OAgBC3B,EAAS2B,GAhBV,2CAAD,KAkBC,IAGD,gCACGC,KAAKC,UAAU9B,GACfA,GACC,uBACE+B,SAAS,WACTC,QAAQ,OACRC,IAAKjC,EACLY,KAAK,cAPX,oBCjBWsB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3e5f7637.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport RecordRTC, { RecordRTCPromisesHandler } from \"recordrtc\";\n\nconst RecordPage = () => {\n  const [state, setState] = useState(\"\");\n\n  useEffect(() => {\n    (async () => {\n      let stream = await navigator.mediaDevices.getUserMedia({\n        video: false,\n        audio: true,\n      });\n      let recorder = new RecordRTCPromisesHandler(stream, {\n        type: \"audio\",\n        recorderType: RecordRTC.StereoAudioRecorder,\n      });\n      recorder.startRecording();\n      const sleep = (m) => new Promise((r) => setTimeout(r, m));\n      await sleep(3000);\n      await recorder.stopRecording();\n      let blob = await recorder.getBlob();\n      URL.createObjectURL(blob);\n      let data = await recorder.getDataURL();\n      setState(data);\n    })();\n  }, []);\n\n  return (\n    <div>\n      {JSON.stringify(state)}\n      {state && (\n        <audio\n          controls=\"controls\"\n          preload=\"none\"\n          src={state}\n          type=\"audio/wav\"\n        />\n      )}\n      dataavailable\n    </div>\n  );\n};\n\nexport default RecordPage;\n","import \"./App.css\";\nimport RecordPage from \"./RecordPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RecordPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}