{"version":3,"sources":["useRecorder.js","Webcam.react.js","RecordPage.js","App.js","reportWebVitals.js","index.js"],"names":["a","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","useRecorder","useState","audioURL","setAudioURL","isRecording","setIsRecording","recorder","setRecorder","useEffect","start","stop","handleData","e","URL","createObjectURL","data","addEventListener","removeEventListener","requestRecorder","then","console","error","React","Component","RecordPage","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","state","setState","video","RecordRTCPromisesHandler","type","recorderType","RecordRTC","StereoAudioRecorder","startRecording","sleep","m","Promise","r","setTimeout","stopRecording","getBlob","getDataURL","JSON","stringify","controls","src","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QA2CA,4BAAAA,EAAA,sEACuBC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IADpE,cACQC,EADR,yBAES,IAAIC,cAAcD,IAF3B,4C,sBAIeE,MA7CK,WAClB,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAgCJ,mBAAS,MAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEAC,qBAAU,WAER,GAAiB,OAAbF,EAAJ,CAQIF,EACFE,EAASG,QAETH,EAASI,OAIX,IAAMC,EAAa,SAACC,GAClBT,EAAYU,IAAIC,gBAAgBF,EAAEG,QAIpC,OADAT,EAASU,iBAAiB,gBAAiBL,GACpC,kBAAML,EAASW,oBAAoB,gBAAiBN,IAnBrDP,G,0CACFc,GAAkBC,KAAKZ,EAAaa,QAAQC,SAmB/C,CAACf,EAAUF,IAUd,MAAO,CAACF,EAAUE,EARK,WACrBC,GAAe,IAGK,WACpBA,GAAe,M,kDCnCEiB,IAAMC,U,eC4CZC,GAxCb9B,UAAUE,cACVF,UAAU+B,oBACV/B,UAAUgC,iBACVhC,UAAUiC,eAGO,WACjB,MAA0B1B,mBAAS,IAAnC,mBAAO2B,EAAP,KAAcC,EAAd,KAwBA,OAtBArB,qBAAU,WACR,sBAAC,kCAAAf,EAAA,sEACoBC,UAAUC,aAAaC,aAAa,CACrDkC,OAAO,EACPjC,OAAO,IAHV,cACKC,EADL,QAKKQ,EAAW,IAAIyB,2BAAyBjC,EAAQ,CAClDkC,KAAM,QACNC,aAAcC,IAAUC,uBAEjBC,iBAEHC,EAAQ,SAACC,GAAD,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAOC,WAAWD,EAAGF,OAXvD,SAYOD,EAAM,KAZb,wBAcO/B,EAASoC,gBAdhB,yBAekBpC,EAASqC,UAf3B,gCAgBkBrC,EAASsC,aAhB3B,QAgBK7B,EAhBL,OAiBCc,EAASd,GAjBV,2CAAD,KAmBC,IAGD,gCACG8B,KAAKC,UAAUlB,GAChB,uBAAOmB,UAAQ,EAACC,IAAKpB,IAFvB,WCzBWqB,MATf,WACE,MAA6DjD,IAA7D,mBACA,OADA,oBAEE,qBAAKkD,UAAU,MAAf,SACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a143d104.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useRecorder = () => {\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n      return;\n    }\n\n    // Manage recorder state.\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    }\n\n    // Obtain the audio when ready.\n    const handleData = (e) => {\n      setAudioURL(URL.createObjectURL(e.data));\n    };\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording];\n};\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  return new MediaRecorder(stream);\n}\nexport default useRecorder;\n","import React from \"react\";\n\nclass Webcam extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return <audio controls src={this.props.src} />;\n  }\n}\n\nexport default Webcam;\n","import React, { useEffect, useState } from \"react\";\nimport { captureUserMedia } from \"./AppUtils\";\nimport Webcam from \"./Webcam.react\";\nimport RecordRTC, { RecordRTCPromisesHandler } from \"recordrtc\";\n\nconst hasGetUserMedia = !!(\n  navigator.getUserMedia ||\n  navigator.webkitGetUserMedia ||\n  navigator.mozGetUserMedia ||\n  navigator.msGetUserMedia\n);\n\nconst RecordPage = () => {\n  const [state, setState] = useState(\"\");\n\n  useEffect(() => {\n    (async () => {\n      let stream = await navigator.mediaDevices.getUserMedia({\n        video: false,\n        audio: true,\n      });\n      let recorder = new RecordRTCPromisesHandler(stream, {\n        type: \"audio\",\n        recorderType: RecordRTC.StereoAudioRecorder,\n      });\n      recorder.startRecording();\n\n      const sleep = (m) => new Promise((r) => setTimeout(r, m));\n      await sleep(3000);\n\n      await recorder.stopRecording();\n      let blob = await recorder.getBlob();\n      let data = await recorder.getDataURL();\n      setState(data);\n    })();\n  }, []);\n\n  return (\n    <div>\n      {JSON.stringify(state)}\n      <audio controls src={state} />\n      wav\n    </div>\n  );\n};\n\nexport default RecordPage;\n","import useRecorder from \"./useRecorder\";\nimport \"./App.css\";\nimport RecordPage from \"./RecordPage\";\n\nfunction App() {\n  let [audioURL, isRecording, startRecording, stopRecording] = useRecorder();\n  return (\n    <div className=\"App\">\n      <RecordPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}