{"version":3,"sources":["useRecorder.js","App.js","reportWebVitals.js","index.js"],"names":["a","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","useRecorder","useState","audioURL","setAudioURL","isRecording","setIsRecording","recorder","setRecorder","useEffect","start","stop","handleData","e","URL","createObjectURL","data","addEventListener","removeEventListener","requestRecorder","then","console","error","App","startRecording","stopRecording","className","src","controls","onClick","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QA2CA,4BAAAA,EAAA,sEACuBC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IADpE,cACQC,EADR,yBAES,IAAIC,cAAcD,IAF3B,4C,sBAIeE,MA7CK,WAClB,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAgCJ,mBAAS,MAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEAC,qBAAU,WAER,GAAiB,OAAbF,EAAJ,CAQIF,EACFE,EAASG,QAETH,EAASI,OAIX,IAAMC,EAAa,SAACC,GAClBT,EAAYU,IAAIC,gBAAgBF,EAAEG,QAIpC,OADAT,EAASU,iBAAiB,gBAAiBL,GACpC,kBAAML,EAASW,oBAAoB,gBAAiBN,IAnBrDP,G,0CACFc,GAAkBC,KAAKZ,EAAaa,QAAQC,SAmB/C,CAACf,EAAUF,IAUd,MAAO,CAACF,EAAUE,EARK,WACrBC,GAAe,IAGK,WACpBA,GAAe,M,eCjBJiB,MAjBf,WACE,MAA6DtB,IAA7D,mBAAKE,EAAL,KAAeE,EAAf,KAA4BmB,EAA5B,KAA4CC,EAA5C,KACA,OACE,sBAAKC,UAAU,MAAf,UAEGvB,GAAY,uBAAOwB,IAAKxB,EAAUyB,UAAQ,IAC3C,wBAAQC,QAASL,EAAgBM,SAAUzB,EAA3C,6BAGA,wBAAQwB,QAASJ,EAAeK,UAAWzB,EAA3C,4BAGA,2CAAcF,SCHL4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e5a82baf.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useRecorder = () => {\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n      return;\n    }\n\n    // Manage recorder state.\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    }\n\n    // Obtain the audio when ready.\n    const handleData = (e) => {\n      setAudioURL(URL.createObjectURL(e.data));\n    };\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording];\n};\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  return new MediaRecorder(stream);\n}\nexport default useRecorder;\n","import useRecorder from \"./useRecorder\";\nimport \"./App.css\";\n\nfunction App() {\n  let [audioURL, isRecording, startRecording, stopRecording] = useRecorder();\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n      {audioURL && <audio src={audioURL} controls />}\n      <button onClick={startRecording} disabled={isRecording}>\n        start recording\n      </button>\n      <button onClick={stopRecording} disabled={!isRecording}>\n        stop recording\n      </button>\n      <p>audioURL: {audioURL}</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}